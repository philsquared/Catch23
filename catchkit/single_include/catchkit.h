/*
 * CatchKit
 * Single header - Generated: 2025-09-22 18:21:58.452208
 * ----------------------------------------------------------
 * This file has been generated by merging together multiple source files.
 * Please don't edit it directly.
 *
 * Distributed under the MIT license. See text reproduced, below:
 *
 * Copyright 2025 Phil Nash
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the “Software”), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE
 */
#ifndef CATCHKIT_PACKED_H_INCLUDED
#define CATCHKIT_PACKED_H_INCLUDED

// Packed header

// System includes (for headers):
#include <cassert>
#include <cmath>
#include <exception>
#include <format>
#include <optional>
#include <source_location>
#include <string>
#include <string_view>
#include <type_traits>
#include <utility>
#include <variant>
#include <vector>

// From header files:

// Packed from catchkit/include/catchkit/result_type.h
namespace CatchKit {

    enum class ResultType {
        Passed,
        Failed
    };

    inline bool operator! (ResultType result) {
        return result == ResultType::Failed;
    }

} // namespace CatchKit


// Packed from catchkit/include/catchkit/operators.h
namespace CatchKit::Detail {

    enum class Operators {
        None,
        Equals,
        NotEqualTo,
        GreaterThan,
        LessThan,
        GreaterThanOrEqual,
        LessThanOrEqual
    };

} // namespace CatchKit::Detail


// Packed from catchkit/include/catchkit/expression_info.h
namespace CatchKit {

    struct SubExpressionInfo {
        std::string description;
        bool result;
    };


    struct UnaryExpressionInfo {
        std::string value;
    };
    struct BinaryExpressionInfo {
        std::string lhs;
        std::string rhs;

        std::string_view op;
    };
    struct MatchExpressionInfo {
        std::string candidate_value;
        std::string matcher;

        std::vector<SubExpressionInfo> sub_expressions;
    };
    struct ExceptionExpressionInfo {
        std::string exception_message;
        enum class Type { Expected, Unexpected, Missing };
        Type type;
    };
    struct ExpectationExpressionInfo {
        // !TBD
    };

    using ExpressionInfo = std::variant<
        std::monostate,
        UnaryExpressionInfo,
        BinaryExpressionInfo,
        MatchExpressionInfo,
        ExceptionExpressionInfo,
        ExpectationExpressionInfo>;

} // namespace CatchKit

template<>
struct std::formatter<CatchKit::ExpressionInfo> {
    constexpr auto parse(std::format_parse_context& ctx) { return ctx.begin(); }
    std::format_context::iterator format(const CatchKit::ExpressionInfo& expr, std::format_context& ctx) const;
};


// Packed from catchkit/include/catchkit/report_on.h
namespace CatchKit {

    enum class ReportOn {
        FailuresOnly,
        AllResults
    };

} // namespace CatchKit


// Packed from catchkit/include/catchkit/result_handler.h
namespace CatchKit::Detail
{
    struct AssertionContext;
    struct VariableCapture;

    enum class ResultDisposition { Abort, Continue };
    enum class ResultDetailNeeded { Yes, No };

    struct ResultHandler {
        ReportOn report_on;

        explicit ResultHandler(ReportOn report_on) : report_on(report_on) {}
        virtual ~ResultHandler();

        virtual void on_assertion_start( ResultDisposition result_disposition, AssertionContext const& context ) = 0;
        [[nodiscard]] virtual auto on_assertion_result( ResultType result ) -> ResultDetailNeeded = 0;
        virtual void on_assertion_result_detail( ExpressionInfo const& expression_info, std::string_view message ) = 0;
        virtual void on_assertion_end() = 0;

        virtual void add_variable_capture(VariableCapture*) { /* do nothing by default */ };
        virtual void remove_variable_capture(VariableCapture*) { /* do nothing by default */ };

    };

} // namespace CatchKit::Detail

namespace CatchKit
{
    using Detail::ResultDisposition;
}


// Packed from catchkit/include/catchkit/assertion_context.h
namespace CatchKit::Detail {

    struct AssertionContext {
        std::string_view macro_name;
        std::string_view original_expression;
        std::string_view message  = {};
        std::source_location location = std::source_location::current();

        auto combine_messages(std::string_view additional_message) -> std::string;
    };

} // namespace CatchKit::Detail

namespace CatchKit {

    using Detail::AssertionContext;

} // namespace CatchKit


// Packed from catchkit/include/catchkit/assert_result_handler.h
namespace CatchKit::Detail {

    struct AssertResultHandler : ResultHandler {
        AssertionContext current_context;
        ResultType last_result = ResultType::Passed;
        ResultDisposition result_disposition = ResultDisposition::Abort;

        AssertResultHandler() : ResultHandler(ReportOn::FailuresOnly) {}

        void on_assertion_start( ResultDisposition result_disposition, AssertionContext const& context ) override;
        [[nodiscard]] auto on_assertion_result( ResultType result ) -> ResultDetailNeeded override;
        void on_assertion_result_detail( ExpressionInfo const& expression_info, std::string_view message ) override;
        void on_assertion_end() override;
    };

} // namespace CatchKit::Detail


// Packed from catchkit/include/catchkit/expr_ref.h
namespace CatchKit::Detail {

    struct Asserter;

    // Holds binary expression
    template<typename LhsT, typename RhsT, Operators Op>
    struct BinaryExprRef {
        LhsT& lhs;
        RhsT& rhs;
        Asserter* asserter = nullptr;
        std::string message = {};

        auto evaluate() -> ResultType;
        auto expand( ResultType result ) -> ExpressionInfo;

        ~BinaryExprRef();

        [[maybe_unused]] auto&& operator, ( std::string_view message ) noexcept {
            this->message = message;
            return *this;
        }

    };

    // Holds a unary expression - ie just evaluates to a single value
    // Also used for the LHS of a binary expression during decomposition
    template<typename T>
    struct UnaryExprRef {
        T& value;
        Asserter* asserter;
        std::string message = {};

        auto evaluate() -> ResultType;
        auto expand( ResultType result ) -> ExpressionInfo;

        ~UnaryExprRef();

        template<Operators Op, typename RhsT>
        auto make_binary_expr( RhsT&& rhs ) noexcept {
            return BinaryExprRef<T, std::remove_reference_t<RhsT>, Op>{ value, rhs, std::exchange(asserter, nullptr) };
        }

        template<typename RhsT>
        [[maybe_unused]] friend auto operator == ( UnaryExprRef lhs, RhsT&& rhs ) noexcept {
            static_assert( requires{ lhs.value == rhs; } );
            return lhs.template make_binary_expr<Operators::Equals>( std::forward<RhsT>( rhs ) );
        }
        template<typename RhsT>
        [[maybe_unused]] friend auto operator != ( UnaryExprRef lhs, RhsT&& rhs ) noexcept {
            static_assert( requires{ lhs.value != rhs; } );
            return lhs.template make_binary_expr<Operators::NotEqualTo>( std::forward<RhsT>( rhs ) );
        }
        template<typename RhsT>
        [[maybe_unused]] friend auto operator < ( UnaryExprRef lhs, RhsT&& rhs ) noexcept {
            static_assert( requires{ lhs.value < rhs; } );
            return lhs.template make_binary_expr<Operators::LessThan>( std::forward<RhsT>( rhs ) );
        }
        template<typename RhsT>
        [[maybe_unused]] friend auto operator > ( UnaryExprRef lhs, RhsT&& rhs ) noexcept {
            static_assert( requires{ lhs.value > rhs; } );
            return lhs.template make_binary_expr<Operators::GreaterThan>( std::forward<RhsT>( rhs ) );
        }
        template<typename RhsT>
        [[maybe_unused]] friend auto operator <= ( UnaryExprRef lhs, RhsT&& rhs ) noexcept {
            static_assert( requires{ lhs.value <= rhs; } );
            return lhs.template make_binary_expr<Operators::LessThanOrEqual>( std::forward<RhsT>( rhs ) );
        }
        template<typename RhsT>
        [[maybe_unused]] friend auto operator >= ( UnaryExprRef lhs, RhsT&& rhs ) noexcept {
            static_assert( requires{ lhs.value >= rhs; } );
            return lhs.template make_binary_expr<Operators::GreaterThanOrEqual>( std::forward<RhsT>( rhs ) );
        }

        [[maybe_unused]] auto&& operator, ( std::string_view message ) noexcept {
            this->message = message;
            return *this;
        }

    };


    struct MatchResult;

    template<typename ArgT, typename MatcherT>
    struct MatchExprRef {
        ArgT& arg;
        MatcherT const& matcher;
        Asserter* asserter = nullptr;
        std::string message = {};

        auto evaluate() -> MatchResult;
        auto expand( MatchResult const& result ) -> ExpressionInfo;

        ~MatchExprRef();
    };

    struct SubExpression {
        bool result;
        void const* matcher_address;
    };

    // Holds the result of a match
    struct MatchResult {
        bool result;
        void const* matcher_address = nullptr;
        std::vector<SubExpression> child_results; // TBD: only include this in composite matcher results?
        explicit(false) MatchResult(bool result, void const* matcher_address = nullptr) : result(result), matcher_address(matcher_address) {}
        explicit operator bool() const { return result; }

        auto set_address(void const* address) -> MatchResult& {
            assert(matcher_address == nullptr || matcher_address == address);
            matcher_address = address;
            return *this;
        }
        auto add_children_from(MatchResult const& other) -> MatchResult& {
            child_results.reserve( child_results.size() + other.child_results.size() );
            std::ranges::copy( other.child_results, std::back_inserter( child_results ) );
            return *this;
        }
        auto make_child_of(void const* new_matcher_address) -> MatchResult& {
            child_results.emplace_back( result, std::exchange( matcher_address, new_matcher_address ) );
            return *this;
        }
    };

} // namespace CatchKit::Detail


// Packed from catchkit/include/catchkit/internal_warnings.h
#if defined(__clang__)
#define CATCHKIT_WARNINGS_SUPPRESS_START                _Pragma( "clang diagnostic push" )
#define CATCHKIT_WARNINGS_SUPPRESS_END                  _Pragma( "clang diagnostic pop" )
#define CATCHKIT_WARNINGS_SUPPRESS_PARENTHESES          _Pragma( "clang diagnostic ignored \"-Wparentheses\"" )
#define CATCHKIT_WARNINGS_SUPPRESS_UNUSED_COMPARISON    _Pragma( "clang diagnostic ignored \"-Wunused-comparison\"" )
#define CATCHKIT_WARNINGS_SUPPRESS_ADDRESS              _Pragma( "clang diagnostic ignored \"-Waddress\"" )
#define CATCHKIT_WARNINGS_SUPPRESS_SIGN_MISMATCH        _Pragma( "clang diagnostic ignored \"-Wsign-compare\"" )
#define CATCHKIT_WARNINGS_SUPPRESS_UNUSED_PARAMETER     _Pragma( "clang diagnostic ignored \"-Wunused-parameter\"" )
#define CATCHKIT_WARNINGS_SUPPRESS_FLOAT_RANGE          _Pragma( "clang diagnostic ignored \"-Wliteral-range\"" )
#define CATCHKIT_WARNINGS_SUPPRESS_NULL_CONVERSION      _Pragma( "clang diagnostic ignored \"-Wnull-conversion\"" )
#define CATCHKIT_WARNINGS_SUPPRESS_SHADOW               _Pragma( "clang diagnostic ignored \"-Wshadow\"" )

#elif defined(__GNUC__) && !defined(__ICC) && !defined(__CUDACC__) // GCC
#define CATCHKIT_WARNINGS_SUPPRESS_START                _Pragma( "GCC diagnostic push" )
#define CATCHKIT_WARNINGS_SUPPRESS_END                  _Pragma( "GCC diagnostic pop" )
#define CATCHKIT_WARNINGS_SUPPRESS_PARENTHESES          _Pragma( "GCC diagnostic ignored \"-Wparentheses\"" )
#define CATCHKIT_WARNINGS_SUPPRESS_UNUSED_COMPARISON
#define CATCHKIT_WARNINGS_SUPPRESS_ADDRESS              _Pragma( "GCC diagnostic ignored \"-Waddress\"" )
#define CATCHKIT_WARNINGS_SUPPRESS_SIGN_MISMATCH        _Pragma( "GCC diagnostic ignored \"-Wsign-compare\"" )
#define CATCHKIT_WARNINGS_SUPPRESS_UNUSED_PARAMETER     _Pragma( "GCC diagnostic ignored \"-Wunused-parameter\"" )
#define CATCHKIT_WARNINGS_SUPPRESS_FLOAT_RANGE
#define CATCHKIT_WARNINGS_SUPPRESS_NULL_CONVERSION
#define CATCHKIT_WARNINGS_SUPPRESS_SHADOW               _Pragma( "GCC diagnostic ignored \"-Wshadow\"" )

#elif define(_MSC_VER)
#define CATCHKIT_WARNINGS_SUPPRESS_START                __pragma( warning(push) )
#define CATCHKIT_WARNINGS_SUPPRESS_END                  __pragma( warning(pop) )
#define CATCHKIT_WARNINGS_SUPPRESS_PARENTHESES
#define CATCHKIT_WARNINGS_SUPPRESS_UNUSED_COMPARISON
#define CATCHKIT_WARNINGS_SUPPRESS_ADDRESS
#define CATCHKIT_WARNINGS_SUPPRESS_SIGN_MISMATCH        __pragma( warning( disable:4389 ) ) __pragma( warning( disable:4018 ) )
#define CATCHKIT_WARNINGS_SUPPRESS_UNUSED_PARAMETER
#define CATCHKIT_WARNINGS_SUPPRESS_FLOAT_RANGE
#define CATCHKIT_WARNINGS_SUPPRESS_NULL_CONVERSION
#define CATCHKIT_WARNINGS_SUPPRESS_SHADOW

#else
// !TBD Other compilers
#define CATCHKIT_WARNINGS_SUPPRESS_START
#define CATCHKIT_WARNINGS_SUPPRESS_END
#define CATCHKIT_WARNINGS_SUPPRESS_PARENTHESES
#define CATCHKIT_WARNINGS_SUPPRESS_UNUSED_COMPARISON
#define CATCHKIT_WARNINGS_SUPPRESS_ADDRESS
#define CATCHKIT_WARNINGS_SUPPRESS_UNUSED_PARAMETER
#define CATCHKIT_WARNINGS_SUPPRESS_FLOAT_RANGE
#define CATCHKIT_WARNINGS_SUPPRESS_NULL_CONVERSION
#define CATCHKIT_WARNINGS_SUPPRESS_SHADOW

#endif


// Packed from catchkit/include/catchkit/operator_to_string.h
namespace CatchKit::Detail {

    // String conversions for operator enum
    template<Operators op>
    [[nodiscard]] consteval auto operator_to_string() noexcept
    {
        using enum Operators;
        if constexpr( op == Equals )                    return "==";
        else if constexpr( op == NotEqualTo )           return "!=" ;
        else if constexpr( op == GreaterThan )          return ">";
        else if constexpr( op == LessThan )             return "<";
        else if constexpr( op == GreaterThanOrEqual )   return ">=";
        else if constexpr( op == LessThanOrEqual )      return "<=";
        else {
            // Note that while None is a valid enum value, we should never use it on a path that leads here
            static_assert( false, "Unrecognised operator" );
        }
    }

} // namespace CatchKit::Detail


// Packed from catchkit/include/catchkit/exceptions.h
namespace CatchKit::Detail {

    extern std::string unknown_exception_message;

    [[nodiscard]] auto get_current_exception_message() -> std::string;

    [[nodiscard]] auto get_exception_message( std::exception_ptr const& ex ) -> std::string;
    [[nodiscard]] auto get_exception_message( std::exception const& ex ) -> std::string;
    [[nodiscard]] auto get_exception_message( std::string const& str ) -> std::string;

    [[nodiscard]] inline auto get_exception_message(...) -> std::string {
        return unknown_exception_message;
    }

} // namespace CatchKit::Detail


// Packed from catchkit/include/catchkit/stringify.h
#ifdef CATCHKIT_FALLBACK_TO_OSTREAM_STRING_CONVERSIONS
#include <sstream>
#endif

namespace CatchKit {
    namespace Detail {
        auto pointer_to_string(void const* p) -> std::string;
        void ignore( auto&& ) noexcept { /* this function doesn't do anything */ }

        auto parse_templated_name( std::string const& templated_name, std::string_view function_name ) -> std::string_view;
        auto parse_templated_name( std::string const& templated_name, std::source_location location = std::source_location::current() ) -> std::string_view;
        auto parse_enum_name_from_function(std::string_view function_name, bool fully_qualified = false) -> std::string_view;
        auto unknown_enum_to_string(size_t enum_value) -> std::string;

        constexpr size_t enum_probe_start = 0;
        constexpr size_t enum_probe_end = 16;

        template<typename E, E candidate=static_cast<E>(enum_probe_start), size_t max_probe=enum_probe_end>
        struct enum_value_string {
            static auto find(E e) -> std::string_view {
                if( e == candidate )
                    return parse_enum_name_from_function(std::source_location::current().function_name());
                if constexpr(static_cast<size_t>( candidate) < max_probe )
                    return enum_value_string<E, static_cast<E>(static_cast<size_t>(candidate)+1)>::find(e);
                return {};
            }
        };

        template<typename E>
        auto enum_to_string(E e) -> std::string {
            if( auto val = enum_value_string<E>::find(e); !val.empty() )
                return std::string(val);
            return unknown_enum_to_string(static_cast<size_t>(e));
        }
    }

    // Specialise this with a stringify member function for your own conversions
    template<typename T>
    struct Stringifier;

    template<typename T>
    concept Stringifiable = requires { Stringifier<T>::stringify; };

    template<typename T>
    [[nodiscard]] auto constexpr stringify(T const& value );
}

// This allows any type for which there is a Stringifier specialisation to be usable by std::format.
// This is necessary so that ranges/ containers of custom types will work.
// Note that if you provide both a std::formatter _and_ a Stringifier for your types,
// then stringified _containers_ (or ranges) of them will prefer the std::formatter specialisations.
template<CatchKit::Stringifiable T>
struct std::formatter<T> {
    constexpr auto parse( std::format_parse_context& ctx ) { return ctx.begin(); }
    auto format(T const& val, auto& ctx) const {
        return std::format_to( ctx.out(), "{}", CatchKit::Stringifier<T>::stringify(val) );
    }
};

namespace CatchKit {
#ifdef FALLBACK_TO_OSTREAM_STRING_CONVERSIONS
    template <typename T>
    concept Streamable = requires( std::ostream os, T value ) {
        { os << value };
    };
#endif

    // Don't specialise this, specialise Stringifier instead
    template<typename T>
    [[nodiscard]] auto constexpr stringify(T const& value ) {
        if constexpr( std::is_enum_v<T> )
            return Detail::enum_to_string( value );
        else if constexpr( std::is_null_pointer_v<T> )
            return "nullptr";
        else if constexpr( std::is_convertible_v<T, char const*> && std::is_pointer_v<T> )
            return value ? std::format("\"{}\"", value) : std::string("nullptr");
        else if constexpr( std::is_convertible_v<T, std::string> )
            return std::format("\"{}\"", value);
        else if constexpr( std::formattable<T, char> )
            return std::format("{}", value);
#ifdef FALLBACK_TO_OSTREAM_STRING_CONVERSIONS
        else if constexpr ( Streamable<T> ) {
            std::ostringstream oss; // !TBD: use an ostringstream pool?
            oss << value;
            return oss.str();
        }
#endif
        else
            return "{?}";
    }

} // namespace CatchKit


// Packed from catchkit/include/catchkit/variable_capture.h
namespace CatchKit::Detail
{
    struct Checker;
    struct ResultHandler;

    struct VariableCapture {
        std::string_view name;
        std::string_view type;
        ResultHandler& result_handler;

        [[nodiscard]] virtual auto get_value() const -> std::string = 0;

    protected:
        VariableCapture(std::string_view name, std::string_view type, Checker& checker);
        ~VariableCapture(); // not virtual because we never destroy polymorphically
    };

    template<typename T>
    struct TypedVariableCapture : VariableCapture {
        T const& value;

        [[nodiscard]] auto get_value() const -> std::string override { return stringify( value ); }

        TypedVariableCapture(T const& value, std::string_view name, Checker& checker)
        :   VariableCapture( name, parse_templated_name("T"), checker ),
            value(value)
        {}
    };

} // namespace CatchKit::Detail

#define CATCHKIT_INTERNAL_DECLARE_VAR_X(suffix, var) CatchKit::Detail::TypedVariableCapture CATCHKIT_INTERNAL_UNIQUE_NAME(var_capture##suffix)(var, #var, check)

#define CATCHKIT_INTERNAL_DECLARE_VARS_1(a) CATCHKIT_INTERNAL_DECLARE_VAR_X(_1, a)
#define CATCHKIT_INTERNAL_DECLARE_VARS_2(a, b) CATCHKIT_INTERNAL_DECLARE_VAR_X(_1, a); CATCHKIT_INTERNAL_DECLARE_VAR_X(_2, b)
#define CATCHKIT_INTERNAL_DECLARE_VARS_3(a, b, c) CATCHKIT_INTERNAL_DECLARE_VAR_X(_1, a); CATCHKIT_INTERNAL_DECLARE_VAR_X(_2, b); CATCHKIT_INTERNAL_DECLARE_VAR_X(_3, c)
#define CATCHKIT_INTERNAL_DECLARE_VARS_4(a, b, c, d) CATCHKIT_INTERNAL_DECLARE_VAR_X(_1, a); CATCHKIT_INTERNAL_DECLARE_VAR_X(_2, b); CATCHKIT_INTERNAL_DECLARE_VAR_X(_3, c); CATCHKIT_INTERNAL_DECLARE_VAR_X(_4, d)

#define DECLARE_VARS_ERROR(...) \
    static_assert(false, \
        "CAPTURE ERROR: Too many variable names provided! " \
        "This macro supports a maximum of 4 variables. " \
        "Consider breaking into multiple CAPTURE calls.")

#define CATCHKIT_INTERNAL_GET_6TH_ARG(arg1, arg2, arg3, arg4, arg5, arg6, ...) arg6
#define CATCHKIT_INTERNAL_DECLARE_VARS_CHOOSER(...) CATCHKIT_INTERNAL_GET_6TH_ARG(__VA_ARGS__, DECLARE_VARS_ERROR, CATCHKIT_INTERNAL_DECLARE_VARS_4, CATCHKIT_INTERNAL_DECLARE_VARS_3, CATCHKIT_INTERNAL_DECLARE_VARS_2, CATCHKIT_INTERNAL_DECLARE_VARS_1)

#define CATCHKIT_INTERNAL_VAR(...) CATCHKIT_INTERNAL_DECLARE_VARS_CHOOSER(__VA_ARGS__)(__VA_ARGS__)
#define CAPTURE(...) CATCHKIT_INTERNAL_VAR(__VA_ARGS__)


// Packed from catchkit/include/catchkit/checker.h
namespace CatchKit::Detail
{
    struct Asserter;

    struct Checker {
        ResultHandler* result_handler;
        ResultDisposition result_disposition;
        bool should_decompose = true;

        auto operator()(std::string_view message = {}, std::source_location assertion_location = std::source_location::current()) -> Asserter;
        auto operator()(AssertionContext const& context) -> Asserter;
    };

    struct Asserter {
        Checker& checker;

        ~Asserter() noexcept(false);

        void handle_unexpected_exceptions(std::invocable<Asserter&> auto const& expr_call) {
            try {
                expr_call(*this);
            }
            catch(...) {
                report_current_exception();
            }
        }

        template<typename T>
        void simple_assert(auto const&, T&&) const noexcept {
            static_assert(std::is_convertible_v<T, std::string_view>, "Only matchers or strings can follow the comma operator");
        }
        void simple_assert(std::nullptr_t, std::string_view message = {}) const noexcept {
            simple_assert(false, message);
        }
        void simple_assert(auto const& result, std::string_view message = {}) const noexcept {
            if( checker.result_handler->on_assertion_result(!result ? ResultType::Failed : ResultType::Passed) == ResultDetailNeeded::Yes )
                checker.result_handler->on_assertion_result_detail(std::monostate(), message);
        }
        void accept_expr(auto& expr) noexcept; // Implemented after the definitions of the Expr Ref types

        template<typename ArgT, typename MatcherT> // !TBD Matcher concept
        constexpr auto that( ArgT&& arg, MatcherT const& matcher ) noexcept {
            // !TBD: Should we use only this path, or keep the decomp operator path, too?
            return MatchExprRef{ arg, matcher, this };
        }

        // To kick off an expression decomposition
        [[maybe_unused]] friend constexpr auto operator << ( Asserter& asserter, auto&& lhs ) noexcept {
            return UnaryExprRef{ lhs, &asserter };
        }
        [[maybe_unused]] friend constexpr auto operator << ( Asserter&& asserter, auto&& lhs ) noexcept {
            return UnaryExprRef{ lhs, &asserter };
        }
    private:
        void report_current_exception() const;
    };

    // --------------

    template<typename T>
    UnaryExprRef<T>::~UnaryExprRef() {
        if( asserter )
            asserter->accept_expr(*this);
    }

    template<typename T>
    auto UnaryExprRef<T>::evaluate() -> ResultType {
        if constexpr( requires (T v){ { !v } -> std::same_as<bool>; }) {
            CATCHKIT_WARNINGS_SUPPRESS_START
            CATCHKIT_WARNINGS_SUPPRESS_ADDRESS
            CATCHKIT_WARNINGS_SUPPRESS_NULL_CONVERSION
            return !value ? ResultType::Failed : ResultType::Passed;
            CATCHKIT_WARNINGS_SUPPRESS_END
        }
        else if constexpr( std::is_null_pointer_v<T> ) {
            // Special case for GCC
            return ResultType::Failed;
        }
        else {
            // Have to do this at runtime because we can get here from the destructor of a UnaryExpr,
            // even if it doesn't happen at runtime because it's actually a binary expresion
            throw std::logic_error("Attempt to use a value that cannot convert to bool in boolean context");
        }
    }
    template<typename T>
    auto UnaryExprRef<T>::expand(ResultType) -> ExpressionInfo {
        return UnaryExpressionInfo{ stringify(value) };
    }

    template<typename LhsT, typename RhsT, Operators Op>
    BinaryExprRef<LhsT, RhsT, Op>::~BinaryExprRef() {
        if( asserter )
            asserter->accept_expr(*this);
    }

    CATCHKIT_WARNINGS_SUPPRESS_START
    CATCHKIT_WARNINGS_SUPPRESS_SIGN_MISMATCH
    template<typename LhsT, typename RhsT, Operators Op>
    auto eval_expr(BinaryExprRef<LhsT, RhsT, Op>& expr) {
        using enum Operators;
        if constexpr( Op == Equals )                    return expr.lhs == expr.rhs;
        else if constexpr( Op == NotEqualTo )           return expr.lhs != expr.rhs;
        else if constexpr( Op == GreaterThan )          return expr.lhs >  expr.rhs;
        else if constexpr( Op == LessThan )             return expr.lhs <  expr.rhs;
        else if constexpr( Op == GreaterThanOrEqual )   return expr.lhs >= expr.rhs;
        else if constexpr( Op == LessThanOrEqual )      return expr.lhs <= expr.rhs;
        else {
            // Note that while None is a valid enum value, we should never use it on a path that leads here
            static_assert( false, "Operator not implemented" );
        }
        std::unreachable();
    }
    CATCHKIT_WARNINGS_SUPPRESS_END

    template<typename LhsT, typename RhsT, Operators Op>
    auto BinaryExprRef<LhsT, RhsT, Op>::evaluate() -> ResultType {
        return static_cast<bool>( eval_expr(*this) ) ? ResultType::Passed : ResultType::Failed;
    }
    template<typename LhsT, typename RhsT, Operators Op>
    auto BinaryExprRef<LhsT, RhsT, Op>::expand(ResultType) -> ExpressionInfo {
        return BinaryExpressionInfo{
            std::string( stringify(lhs) ),
            std::string( stringify(rhs) ),
            operator_to_string<Op>() };
    }

    template<typename ArgT, typename MatcherT>
    MatchExprRef<ArgT, MatcherT>::~MatchExprRef() {
        if( asserter )
            asserter->accept_expr(*this);
    }

    inline auto to_result_type( MatchResult const& result ) -> ResultType { return result ? ResultType::Passed : ResultType::Failed; }

    // -------

    inline auto to_result_type( ResultType result ) -> ResultType { return result; }

    void Asserter::accept_expr( auto& expr ) noexcept {
        auto raw_result = expr.evaluate();
        if( checker.result_handler->on_assertion_result( to_result_type( raw_result ) ) == ResultDetailNeeded::Yes )
            checker.result_handler->on_assertion_result_detail( expr.expand( raw_result ), expr.message );
    }

} // namespace CatchKit::Detail

namespace CatchKit
{
    using Detail::Checker;

} //namespace CatchKit

// These global instances are used if not using the ones passed in to a function locally
extern constinit CatchKit::Checker check; // NOLINT
extern constinit CatchKit::Checker require; // NOLINT


#define CATCHKIT_ASSERT_INTERNAL(macro_name, checker, ...) \
    if( checker.should_decompose ) \
        checker( CatchKit::AssertionContext(macro_name, #__VA_ARGS__) ).handle_unexpected_exceptions([&](CatchKit::Detail::Asserter& asserter){ \
            CATCHKIT_WARNINGS_SUPPRESS_START \
            CATCHKIT_WARNINGS_SUPPRESS_UNUSED_COMPARISON \
            asserter << __VA_ARGS__; \
            CATCHKIT_WARNINGS_SUPPRESS_END \
        }); \
    else checker(CatchKit::AssertionContext(macro_name, #__VA_ARGS__)).simple_assert(__VA_ARGS__)


#define CATCHKIT_ASSERT_THAT_INTERNAL(macro_name, checker, arg, match_expr) \
    do { using namespace CatchKit::Matchers; \
        checker(CatchKit::AssertionContext(macro_name, #arg ", " #match_expr)).that( [&]{ return arg; }, match_expr ); \
    } while( false )


#define CHECK(...) CATCHKIT_ASSERT_INTERNAL( "CHECK", check, __VA_ARGS__ )
#define REQUIRE(...) CATCHKIT_ASSERT_INTERNAL( "REQUIRE", require, __VA_ARGS__ )

#define CHECK_THAT( arg, matcher ) CATCHKIT_ASSERT_THAT_INTERNAL( "CHECK_THAT", check, arg, matcher )
#define REQUIRE_THAT( arg, matcher ) CATCHKIT_ASSERT_THAT_INTERNAL( "REQUIRE_THAT", require, arg, matcher )

#define REQUIRE_STATIC(...) static_assert(__VA_ARGS__)

// !TBD: These should have a dedicated internal macro (in Catch2 it was INTERNAL_CATCH_MSG)
#define PASS(...) CATCHKIT_ASSERT_INTERNAL( "PASS", check, true __VA_OPT__(,) __VA_ARGS__ )
#define FAIL(...) CATCHKIT_ASSERT_INTERNAL( "FAIL", require, false __VA_OPT__(,) __VA_ARGS__ )



// Packed from catchkit/include/catchkit/internal_matchers.h
namespace CatchKit {

    using Detail::MatchResult;

    namespace Detail {

        struct Matcher {
            // This is just a marker interface
        };

        struct CouldBeAnything {
            template <typename T> explicit(false) operator T() const;
        };

        struct AlwaysMatcher {
            auto match(auto&&) const -> MatchResult { return true; }
            auto lazy_match(auto&&) const -> MatchResult  { return true; }
        };

        // !TBD: refactor this all in terms of marker interfaces, or something
        // * currently we don't handle overloads or constrained-template match functions properly
        template<typename M, typename T=CouldBeAnything>
        concept IsEagerMatcher = requires(M m, T something) {
            { m.match(something) } -> std::same_as<MatchResult>;
        };

        template<typename M>
        concept IsLazyMatcher = requires(M m) {
            { m.lazy_match([]{}) } -> std::same_as<MatchResult>;
        };

        template<typename M>
        concept IsEagerBindableMatcher = requires(M m, CouldBeAnything something, AlwaysMatcher matcher) {
            { m.bound_match(something, matcher) } -> std::same_as<MatchResult>;
        };

        template<typename M>
        concept IsLazyBindableMatcher = requires(M m, AlwaysMatcher matcher) {
            { m.lazy_bound_match([]{}, matcher) } -> std::same_as<MatchResult>;
        };

        template<typename M>
        concept IsMatcher = IsEagerMatcher<M> || IsLazyMatcher<M>;

        template<typename M>
        concept MatcherHasDescribeMethod = requires(M const m) {
            { m.describe() } -> std::convertible_to<std::string>;
        };

        template<typename ArgT, typename MatcherT>
        auto invoke_matcher( MatcherT& matcher, ArgT&& arg ) -> MatchResult {
            if constexpr( IsLazyMatcher<MatcherT> ) {
                if constexpr( std::invocable<ArgT> )
                // static_assert( std::invocable<ArgT>, "Lazy matchers must be matched against lambdas" );
                    return matcher.lazy_match( arg ).set_address(&matcher);
                else if constexpr( IsEagerMatcher<MatcherT> )
                    return matcher.match( arg ).set_address( &matcher );
                else
                    static_assert( false, "Lazy matchers must be matched against lambdas" );
            }
            else if constexpr( IsEagerMatcher<MatcherT> ) {
                if constexpr( std::invocable<ArgT> )
                    return matcher.match( arg() ).set_address(&matcher);
                else
                    return matcher.match( arg ).set_address( &matcher );
            }
            else {
                static_assert( false, "RHS of match statement is not a matcher" );
            }
        }


        // The result of a && expression
        template<typename M1, typename M2>
        struct AndMatcher {
            M1& matcher1;
            M2& matcher2;

            auto match( auto const& value ) const -> MatchResult {
                auto result1 = invoke_matcher( matcher1, value ).make_child_of(this);
                if( !result1 )
                    return result1; // Short circuit
                return invoke_matcher( matcher2, value )
                    .make_child_of(this) // Create new matcher for this level
                    .add_children_from(result1); // add in the other result

            }
            [[nodiscard]] auto describe() const {
                return std::format("({} && {})", matcher1.describe(), matcher2.describe());
            }
        };

        // The result of a || expression
        template<typename M1, typename M2>
        struct OrMatcher {
            using composite_matcher = void;

            M1& matcher1;
            M2& matcher2;

            auto match( auto const& value ) const -> MatchResult {
                auto result1 = invoke_matcher(matcher1, value).make_child_of(this);
                if( result1 )
                    return result1; // Short circuit
                return invoke_matcher( matcher2,  value )
                    .make_child_of(this) // Create new matcher for this level
                    .add_children_from(result1); // add in the other result
            }
            [[nodiscard]] auto describe() const {
                return std::format("({} || {})", matcher1.describe(), matcher2.describe());
            }
        };

        // The result of a ! expression
        template<typename M>
        struct NotMatcher {
            M& base_matcher;

            auto match( auto const& value ) const -> MatchResult {
                return match_common( value );
            }
            // !TBD: only include lazy_match if the base matcher is lazy
            auto lazy_match( auto const& value ) const -> MatchResult {
                return match_common( value );
            }
            auto match_common( auto const& value ) const -> MatchResult {
                auto result = invoke_matcher(base_matcher, value).make_child_of(this);
                result.result = !result.result;
                return result;

            }
            [[nodiscard]] auto describe() const {
                return std::format("!({})", base_matcher.describe());
            }
        };

        template<typename M2>
        auto operator && (IsMatcher auto&& m1, M2&& m2) {
            static_assert(IsMatcher<M2>, "Operand to && is not a matcher");
            return AndMatcher(m1, m2);
        }

        template<typename M2>
        auto operator || (IsMatcher auto&& m1, M2&& m2) {
            static_assert(IsMatcher<M2>, "Operand to || is not a matcher");
            return OrMatcher( m1, m2 );
        }

        auto operator ! (IsMatcher auto&& m) {
            return NotMatcher(m);
        }

        // Matchers may be monadically bound with the >>= operator.
        // If so, the left operand must implement bound_match() or lazy_bound_match()
        template<typename M1, typename M2>
        struct BoundMatchers {
            M1 matcher1;
            M2 matcher2;

            template<typename ArgT>
            auto lazy_match( ArgT const& arg ) const -> MatchResult {
                if constexpr ( IsLazyBindableMatcher<M1> ) {
                    static_assert( std::invocable<ArgT>, "Lazy matchers must be matched against lambdas" );
                    return matcher1.lazy_bound_match(arg, matcher2)
                        .set_address(&matcher1)
                        .make_child_of(this);
                }
                else
                    return match(arg);
            }

            template<typename ArgT>
            auto match( ArgT const& arg ) const -> MatchResult {
                static_assert( IsEagerBindableMatcher<M1>, "The LHS of >>= must be a bindable matcher" );
                if constexpr( std::invocable<ArgT> )
                    return matcher1.bound_match(arg(), matcher2)
                        .set_address(&matcher1)
                        .make_child_of(this);
                else
                    return matcher1.bound_match(arg, matcher2)
                        .set_address(&matcher1)
                        .make_child_of(this);
            }

            [[nodiscard]] auto describe() const -> std::string {
                return std::format("({} >>= {})", matcher1.describe(), matcher2.describe());
            }
        };

        template<IsMatcher M1, typename M2>
        auto operator >>= ( M1&& m1, M2&& m2 ) {
            static_assert(IsMatcher<M2>, "Operand to >>= is not a matcher");
            return BoundMatchers{std::forward<M1>(m1), std::forward<M2>(m2)};
        }


        template<typename ArgT, IsMatcher MatcherT>
        [[maybe_unused]] constexpr auto operator, ( UnaryExprRef<ArgT>&& arg, MatcherT const& matcher ) noexcept {
            static_assert( MatcherHasDescribeMethod<MatcherT>, "Matcher is missing describe method" );
            return MatchExprRef{ arg.value, matcher, std::exchange(arg.asserter, nullptr) };
        }

        template<typename ArgT, typename MatcherT>
        [[maybe_unused]] constexpr auto operator, ( MatchExprRef<ArgT, MatcherT>&& matcher_ref, std::string_view message ) noexcept {
            matcher_ref.message = message;
            return matcher_ref;
        }

        template<typename M>
        concept IsBinaryCompositeMatcher = requires(M const m) {
            { m.matcher1 } -> IsMatcher;
            { m.matcher2 } -> IsMatcher;
        };

        template<typename M>
        concept IsUnaryCompositeMatcher = requires(M const m) {
            { m.base_matcher } -> IsMatcher;
        };

        template<typename M>
        concept IsCompositeMatcher = IsBinaryCompositeMatcher<M> || IsUnaryCompositeMatcher<M>;

        void add_subexpressions( std::vector<SubExpressionInfo>& sub_expressions, MatchResult const& results, void const* matcher_address, std::string const& description );

        template<typename M>
        auto collect_subexpressions(M const& matcher, std::vector<SubExpressionInfo>& sub_expressions, MatchResult const& results) {
            if constexpr( IsBinaryCompositeMatcher<M> ) {
                collect_subexpressions(matcher.matcher1, sub_expressions, results);
                collect_subexpressions(matcher.matcher2, sub_expressions, results);
            }
            else if constexpr( IsUnaryCompositeMatcher<M> ) {
                collect_subexpressions(matcher.base_matcher, sub_expressions, results);
            }
            else {
                add_subexpressions( sub_expressions, results, &matcher, matcher.describe() );
            }
        }

        template<typename ArgT, typename MatcherT>
        auto MatchExprRef<ArgT, MatcherT>::evaluate() -> MatchResult {
            return invoke_matcher( matcher, arg );
        }

        template<typename ArgT, typename MatcherT>
        auto MatchExprRef<ArgT, MatcherT>::expand( MatchResult const& result ) -> ExpressionInfo {
            std::vector<SubExpressionInfo> sub_expressions;
            if constexpr ( IsCompositeMatcher<MatcherT>) {
                collect_subexpressions(matcher, sub_expressions, result);
            }
            std::string arg_as_string;
            if constexpr (!std::is_void_v<decltype(arg())>) {
                try {
                    arg_as_string = stringify(arg());
                }
                catch(...) {
                    arg_as_string = std::format("exception thrown while evaluating matcher: {}", get_current_exception_message() );
                }
            }
            return MatchExpressionInfo{ arg_as_string, matcher.describe(), std::move(sub_expressions) };
        }

    } // namespace Detail

    namespace Matchers {

        using Detail::operator &&;
        using Detail::operator ||;
        using Detail::operator !;
        using Detail::operator >>=;

    } // namespace Matchers

} // namespace CatchKit


// Packed from catchkit/include/catchkit/matchers.h
namespace CatchKit {

    namespace GenericMatchers {
        template<typename T>
        struct Equals {
            T& match_value;

            [[nodiscard]] constexpr auto match(std::remove_const_t<T>& value) const -> MatchResult {
                return value == match_value;
            }
            [[nodiscard]] constexpr auto match(T const& value) const -> MatchResult {
                return value == match_value;
            }
            [[nodiscard]] auto describe() const {
                return std::format("equals( {} )", stringify(match_value));
            }
        };

        template<typename PredicateT>
        struct MatchesPredicate {
            PredicateT pred;
            std::string description;

            explicit MatchesPredicate( PredicateT&& pred, std::string description )
            : pred( std::move(pred) ), description( std::move(description) ) {}

            auto match( auto const& arg ) const -> MatchResult {
                return pred(arg);
            }
            auto describe() const -> std::string {
                return description;
            }
        };
    }

    namespace StringMatchers {

        struct CaseSensitive {
            static bool equal(std::string_view str1, std::string_view str2);
            static bool find(std::string_view str, std::string_view substr);
        };
        struct CaseInsensitive {
            static bool equal(std::string_view str1, std::string_view str2);
            static bool find(std::string_view str, std::string_view substr);
        };

        template<typename CasePolicy=CaseSensitive>
        struct StartsWith {
            std::string_view match_str;

            [[nodiscard]] auto match(std::string_view str) const -> MatchResult {
                if( match_str.size() > str.size() )
                    return false;
                return CasePolicy::equal(str.substr(0, match_str.size()), match_str);
            }
            [[nodiscard]] auto describe() const {
                return std::format("starts_with(\"{}\")", match_str);
            }
        };
        template<typename CasePolicy=CaseSensitive>
        struct EndsWith {
            std::string_view match_str;

            [[nodiscard]] auto match(std::string_view str) const -> MatchResult {
                if( match_str.size() > str.size() )
                    return false;
                return CasePolicy::equal(str.substr(str.size()-match_str.size()), match_str);
            }
            [[nodiscard]] auto describe() const {
                return std::format("ends_with(\"{}\")", match_str);
            }
        };
        template<typename CasePolicy=CaseSensitive>
        struct Contains {
            std::string_view match_str;
            [[nodiscard]] auto match(std::string_view str) const -> MatchResult {
                return CasePolicy::find(str, match_str);
            }
            [[nodiscard]] auto describe() const {
                return std::format("contains(\"{}\")", match_str);
            }
        };
        template<typename CasePolicy=CaseSensitive>
        struct Equals {
            std::string_view match_str;

            [[nodiscard]] auto match(std::string_view str) const -> MatchResult {
                return CasePolicy::equal(str, match_str);
            }
            [[nodiscard]] auto describe() const {
                return std::format("equals(\"{}\")", match_str);
            }
        };

    } // namespace StringMatchers

    namespace ExceptionMatchers {

        struct HasMessage {
            std::optional<std::string> what;

            [[nodiscard]] auto match(auto const& ex) const -> MatchResult {
                return what ? Detail::get_exception_message(ex) == *what : true;
            }
            template<typename BoundMatcherT>
            [[nodiscard]] auto bound_match(auto const& ex, BoundMatcherT const& bound_matcher ) const -> MatchResult {
                static_assert(Detail::IsEagerMatcher<BoundMatcherT>);

                std::string message = Detail::get_exception_message(ex);
                if( what && message != *what )
                    return false;

                return bound_matcher.match(message)
                    .set_address(&bound_matcher)
                    .make_child_of(this);
            }

            [[nodiscard]] auto describe() const -> std::string {
                if( what )
                    return std::format("has_message(\"{}\")", *what);
                else
                    return std::format("has_message()");
            }
        };

        template<typename E=void>
        struct Throws {
            template<Detail::IsEagerMatcher MessageMatcher>
            auto constexpr with_message_that( MessageMatcher const& message_matcher ) {
                using Detail::operator >>=;
                return *this >>= HasMessage() >>= message_matcher;
            }
            auto constexpr with_message( std::string_view message_to_match ) {
                using Detail::operator >>=;
                return *this >>= HasMessage() >>= StringMatchers::Equals(message_to_match);
            }

            template<typename ArgT>
            [[nodiscard]] constexpr auto lazy_match(ArgT&& f) const -> MatchResult {
                return lazy_bound_match(std::forward<ArgT>(f), Detail::AlwaysMatcher()).make_child_of(this);
            }

            template<typename BoundMatcherT>
            [[nodiscard]] constexpr auto lazy_bound_match(auto&& f, BoundMatcherT const& bound_matcher) const -> MatchResult {
                if constexpr( std::is_void_v<E> ) {
                    try {
                        f();
                        return false;
                    }
                    catch(...) {
                        return bound_matcher.match(std::current_exception())
                            .set_address(&bound_matcher)
                            .make_child_of(this);
                    }
                }
                else {
                    static_assert(Detail::IsEagerMatcher<BoundMatcherT, E>,
                        "The bound matcher must accept the type (or a super class of) that was detected as thrown");
                    try {
                        f();
                        return false;
                    }
                    catch(E& ex) {
                        return bound_matcher.match(ex)
                            .set_address(&bound_matcher)
                            .make_child_of(this);
                    }
                    catch(...) {
                        return false;
                    }
                }
                return false;
            }
            [[nodiscard]] auto describe() const -> std::string{
                if constexpr(std::is_void_v<E>)
                    return "throws()";
                else
                    return std::format("throws<{}>()", Detail::parse_templated_name("E"));
            }
        };

    } // namespace ExceptionMatchers

    namespace FloatMatchers {
        struct IsCloseTo {
            double target;
            double epsilon = 100*std::numeric_limits<float>::epsilon();

            [[nodiscard]] auto match(double value) const -> MatchResult {
                return std::fabs(value-target) < epsilon;
            }
            [[nodiscard]] auto describe() const {
                return std::format("is_close_to({})", target);
            }
        };
    } // namespace FloatMatchers

    namespace VectorMatchers {
        template<typename T, typename AllocatorT>
        struct Equals {
            std::vector<T, AllocatorT> const& match_vec;

            [[nodiscard]] auto match(auto const& vec) const -> MatchResult {
                if (match_vec.size() != vec.size())
                    return false;
                return std::equal(match_vec.begin(), match_vec.end(), vec.begin());
            }
            [[nodiscard]] auto describe() const {
                return std::format("equals({})", stringify(match_vec));
            }
        };
    }

    namespace Matchers {
        using StringMatchers::CaseSensitive;
        using StringMatchers::CaseInsensitive;

        template<class T>
        concept NotStringViewable = !std::is_convertible_v<T, std::string_view>;

        template<NotStringViewable T>
        auto equals(T& value) { return GenericMatchers::Equals<T>{value}; }

        template<typename CasePolicy=CaseSensitive>
        auto starts_with(std::string_view str) { return StringMatchers::StartsWith<CasePolicy>{str}; }

        template<typename CasePolicy=CaseSensitive>
        auto ends_with(std::string_view str) { return StringMatchers::EndsWith<CasePolicy>{str}; }

        template<typename CasePolicy=CaseSensitive>
        auto contains(std::string_view str) { return StringMatchers::Contains<CasePolicy>{str}; }

        template<typename CasePolicy=CaseSensitive>
        auto equals(std::string_view str) { return StringMatchers::Equals<CasePolicy>{str}; }

        inline auto is_close_to(float target) { return FloatMatchers::IsCloseTo{target}; }
        inline auto is_close_to(double target) { return FloatMatchers::IsCloseTo{target}; }
        inline auto is_close_to(float target, float epsilon) { return FloatMatchers::IsCloseTo{target, epsilon}; }
        inline auto is_close_to(double target, double epsilon) { return FloatMatchers::IsCloseTo{target, epsilon}; }

        inline auto is_true() { static bool true_value = true; return equals(true_value); }
        inline auto is_false() { static bool false_value = false; return equals(false_value); }

        template<typename T, typename AllocatorT>
        auto equals(std::vector<T, AllocatorT> const& vec) { return VectorMatchers::Equals<T, AllocatorT>{vec}; }

        template<typename T, typename AllocatorT>
        auto equals(std::vector<T, AllocatorT>& vec) { return VectorMatchers::Equals<T, AllocatorT>{vec}; }

        template<typename E=void>
        using throws = ExceptionMatchers::Throws<E>;

        template<typename PredicateT>
        auto matches_predicate(PredicateT&& pred, std::string description = "predicate") {
            return GenericMatchers::MatchesPredicate<PredicateT>(std::forward<PredicateT>(pred), std::move(description));
        }

    } // namespace Matchers

} // namespace CatchKit

// From source files:
#ifdef CATCHKIT_IMPL

// System includes (for impl):
#include <algorithm>
#include <print>
#include <sstream>


// Packed from catchkit/src/assert_result_handler.cpp
namespace CatchKit::Detail {

    void AssertResultHandler::on_assertion_start( ResultDisposition result_disposition, AssertionContext const& context ) {
        current_context = std::move(context);
        this->result_disposition = result_disposition;
    }

    auto AssertResultHandler::on_assertion_result( ResultType result ) -> ResultDetailNeeded {
        last_result = result;
        if( last_result == ResultType::Passed )
            return ResultDetailNeeded::No;
        return ResultDetailNeeded::Yes;
    }
    void AssertResultHandler::on_assertion_result_detail( ExpressionInfo const& expression_info, std::string_view message ) {;
        // !TBD When we can use stacktrace do something like this:
        // https://godbolt.org/z/jM4TnaMEW

        // Redundant?
        auto os = stdout;
        if (last_result != ResultType::Passed )
            os = stderr;

        std::println(os, "{}:{}:{}: in function '{}'",
                current_context.location.file_name(),
                current_context.location.line(),
                current_context.location.column(),
                current_context.location.function_name());
        std::string_view macro_name = current_context.macro_name;
        if ( macro_name.empty() )
            macro_name = "assertion";
        if ( !current_context.original_expression.empty() )
            std::println(os, "{} {} for expression:\n\t{}",
                macro_name, (last_result == ResultType::Passed) ? "passed" : "failed",
                current_context.original_expression);
        else
            std::println(os, "{} {}",
                macro_name, (last_result == ResultType::Passed) ? "passed" : "failed");

        if( last_result == ResultType::Failed ) {
            if( auto except_expr = std::get_if<ExceptionExpressionInfo>( &expression_info ) ) {
                switch( except_expr->type ) {
                    case ExceptionExpressionInfo::Type::Missing:
                        std::println(os, "due to a missing exception");
                        break;
                case ExceptionExpressionInfo::Type::Unexpected:
                    std::println(os, "due to an unexpected exception");
                    break;
                default:
                    assert( false );
                }
            }
        }
        if(!std::holds_alternative<std::monostate>(expression_info))
            std::println(os, "with expansion:\n\t{}", expression_info );

        if (!message.empty()) {
            std::println(os, "with message:\n\t{}", message);
        }
    }
    void AssertResultHandler::on_assertion_end() {
        if ( last_result != ResultType::Passed && result_disposition == ResultDisposition::Abort ) {
            std::terminate();
        }
    }

} // namespace CatchKit::Detail

// Packed from catchkit/src/assertion_context.cpp
namespace CatchKit::Detail {

    auto AssertionContext::combine_messages( std::string_view additional_message ) -> std::string {
        if(!message.empty()) {
            if(!additional_message.empty())
                return std::string(message) + "\n" + std::string(additional_message);
            return std::string(message);
        }
        if(!additional_message.empty())
            return std::string(additional_message);
        return {};
    }

} // namespace CatchKit::Detail
// Packed from catchkit/src/checker.cpp
namespace {
    CatchKit::Detail::AssertResultHandler default_assertion_handler;
}

constinit CatchKit::Checker check( &default_assertion_handler, CatchKit::ResultDisposition::Continue );
constinit CatchKit::Checker require( &default_assertion_handler, CatchKit::ResultDisposition::Abort );

namespace CatchKit::Detail {

    auto Checker::operator()(std::string_view message, std::source_location assertion_location) -> Asserter {
        return operator()(AssertionContext{{}, {}, message, assertion_location});
    }

    auto Checker::operator()(AssertionContext const& context) -> Asserter {
        result_handler->on_assertion_start(result_disposition, context);
        return Asserter{*this};
    }

    Asserter::~Asserter() noexcept(false) {
        checker.result_handler->on_assertion_end(); // This may throw to cancel the test
    }

    void Asserter::report_current_exception() const {
        if( checker.result_handler->on_assertion_result(ResultType::Failed) == ResultDetailNeeded::Yes ) {
            checker.result_handler->on_assertion_result_detail(
                ExceptionExpressionInfo{
                    get_exception_message(
                        std::current_exception()),
                        ExceptionExpressionInfo::Type::Unexpected },
                    {} );
        }
    }


} // namespace CatchKit::Detail

// Packed from catchkit/src/exceptions.cpp
namespace CatchKit::Detail {

    std::string unknown_exception_message = "<unknown exception type>";

    [[nodiscard]] auto get_exception_message( std::exception const& ex ) -> std::string {
        return ex.what();
    }
    [[nodiscard]] auto get_exception_message( std::string const& str ) -> std::string {
        return str;
    }

    [[nodiscard]] auto get_exception_message( std::exception_ptr const& ex ) -> std::string {
        std::string message;
        try {
            std::rethrow_exception(ex);
        }
        catch(std::exception& e) {
            return get_exception_message(e);
        }
        catch (std::string& s) {
            return get_exception_message(s);
        }
        catch(...) {
            // !TBD: registry for custom exception translations
            return unknown_exception_message;
        }
    }
    [[nodiscard]] auto get_current_exception_message() -> std::string {
        return get_exception_message(std::current_exception());
    }


} // namespace CatchKit::Detail
// Packed from catchkit/src/expression_info.cpp
std::format_context::iterator std::formatter<CatchKit::ExpressionInfo>::format(const CatchKit::ExpressionInfo& expr, std::format_context& ctx) const {
    using namespace CatchKit;

    return std::visit(
        [&]<typename T>(T const& expr) -> std::format_context::iterator {
            if constexpr(std::is_same_v<T, UnaryExpressionInfo>)
                return std::format_to( ctx.out(), "{}", expr.value );
            if constexpr(std::is_same_v<T, BinaryExpressionInfo>)
                return std::format_to( ctx.out(), "{} {} {}", expr.lhs, expr.op, expr.rhs );
            if constexpr(std::is_same_v<T, MatchExpressionInfo>)
                return std::format_to( ctx.out(), "{} {}", expr.candidate_value, expr.matcher );
            if constexpr(std::is_same_v<T, ExceptionExpressionInfo>)
                return std::format_to( ctx.out(), "{}", expr.exception_message );
            assert(false);
    }, expr);
}

// Packed from catchkit/src/matchers.cpp
namespace CatchKit {

    // !TBD: test the others
    static_assert(Detail::IsMatcher<GenericMatchers::Equals<bool>>);
    static_assert(Detail::IsEagerMatcher<ExceptionMatchers::HasMessage>);
    static_assert(Detail::IsMatcher<ExceptionMatchers::HasMessage>);

    namespace StringMatchers {

        bool CaseSensitive::equal(std::string_view str1, std::string_view str2) {
            return str1 == str2;
        }
        bool CaseSensitive::find(std::string_view str, std::string_view substr) {
            return str.find(substr) != std::string_view::npos;
        }
        bool CaseInsensitive::equal(std::string_view str1, std::string_view str2) {
            return std::ranges::equal(str1, str2,
                [](char a, char b) {
                    return std::tolower(a) == std::tolower(b);
                });
        }
        bool CaseInsensitive::find(std::string_view str, std::string_view substr) {
            return !std::ranges::search(str, substr,
                [](char a, char b) {
                    return std::tolower(a) == std::tolower(b);
                }).empty();
        }

    } // namespace StringMatchers

    namespace Detail {
        void add_subexpressions( std::vector<SubExpressionInfo>& sub_expressions, MatchResult const& results, void const* matcher_address, std::string const& description ) {
            if( auto it = std::ranges::find( results.child_results, matcher_address, &SubExpression::matcher_address ); it != results.child_results.end() )
                sub_expressions.emplace_back(description, it->result);
            else if( results.matcher_address == matcher_address )
                sub_expressions.emplace_back(description, results.result);
        }
    } // namespace Detail

} // namespace CatchKit
// Packed from catchkit/src/result_handler.cpp
namespace CatchKit::Detail
{
    ResultHandler::~ResultHandler() = default;

} // namespace CatchKit::Detail
// Packed from catchkit/src/stringify.cpp
namespace CatchKit::Detail {

    auto parse_templated_name( std::string const& templated_name, std::string_view function_name ) -> std::string_view {
        if( auto start = function_name.find(templated_name + " = "); start != std::string_view::npos ) {
            start += templated_name.size() + 3;
            if( auto end = function_name.find_first_of(",;", start); end != std::string_view::npos )
                return function_name.substr(start, end-start);
        }
        return {};
    }
    auto parse_templated_name( std::string const& templated_name, std::source_location location ) -> std::string_view {
        return parse_templated_name( templated_name, location.function_name() );
    }
    auto parse_enum_name_from_function(std::string_view function_name, bool fully_qualified) -> std::string_view {
        auto qualified_enum_name = parse_templated_name("candidate", function_name);
        if( fully_qualified )
            return qualified_enum_name;
        if( auto last_colon = qualified_enum_name.find_last_of(':'); last_colon != std::string_view::npos )
            return qualified_enum_name.substr(last_colon+1);
        return {};
    }
    auto unknown_enum_to_string(size_t enum_value) -> std::string {
        return std::format("<unknown enum value: {}>", enum_value);
    }

    auto pointer_to_string(void const* p) -> std::string {
        return std::format("0x{:0>8}", reinterpret_cast<intptr_t>(p));
    }

} // namespace CatchKit::Detail

// Packed from catchkit/src/variable_capture.cpp
namespace CatchKit::Detail {

    VariableCapture::VariableCapture(std::string_view name, std::string_view type, Checker& checker)
    : name(name), type(type), result_handler(*checker.result_handler) {
        result_handler.add_variable_capture(this);
    }
    VariableCapture::~VariableCapture() {
        result_handler.remove_variable_capture(this);
    }

} // namespace CatchKit::Detail
#endif // CATCHKIT_IMPL

#endif // CATCHKIT_PACKED_H_INCLUDED
